diff --git a/docs/prompts/22.md b/docs/prompts/22.md
new file mode 100644
index 0000000..b0a7754
--- /dev/null
+++ b/docs/prompts/22.md
@@ -0,0 +1,48 @@
+EXECUTION MODE — lock Ship size to 50px and remove dev overlay. Output ONE unified diff under `/diffs/` only. Then commit and push.
+
+Goal
+- Make 50px the permanent ship height.
+- Remove the DevTuningOverlay and all related wiring so the app runs clean.
+
+Scope
+- `/AsteroidsV2/reactShell/src/game/entities/Ship.ts`
+- `/AsteroidsV2/reactShell/src/game/GameCanvas.tsx`
+- `/AsteroidsV2/reactShell/src/App.tsx`
+- `/AsteroidsV2/reactShell/src/ui/DevTuningOverlay.tsx` (delete)
+- `/AsteroidsV2/reactShell/src/styles.css` (remove overlay styles only if present)
+
+Changes
+
+1) Ship.ts
+- Ensure a single constant is used for initial/default size:
+  ```ts
+  const SHIP_DESIRED_PX = 50;
+
+	•	Keep setPixelHeight(px: number) implemented (useful later), but it won’t be driven by UI now.
+
+	2.	GameCanvas.tsx
+
+	•	Remove the shipPixelSize prop and any useEffect that watches it.
+	•	On ship construction, call the ship’s internal default (50px). Do not wire runtime size changes.
+
+	3.	App.tsx
+
+	•	Remove Dev overlay state/handlers (showDev, backtick toggle, DEV button).
+	•	Remove <DevTuningOverlay ... /> usage and import.
+
+	4.	Delete the overlay component
+
+	•	Delete file: src/ui/DevTuningOverlay.tsx.
+
+	5.	styles.css
+
+	•	Remove only the .dev-overlay / .dev-toggle rules if they were added; leave other styles intact.
+
+Constraints
+	•	Do NOT modify physics, input, PostFX, or start screen logic.
+	•	Keep everything else as-is; this is strictly a cleanup + constant change.
+
+Deliverable
+	•	Print ONE timestamped unified diff under /diffs/ with all edits/deletions above (full patch, no truncation/summaries).
+	•	After printing, commit and push.
+
diff --git a/reactShell/public/assets/ship/ship.png b/reactShell/public/assets/ship/ship.png
index 4c713f2..d1a30bb 100644
Binary files a/reactShell/public/assets/ship/ship.png and b/reactShell/public/assets/ship/ship.png differ
diff --git a/reactShell/public/assets/ship/ship2.png b/reactShell/public/assets/ship/ship2.png
new file mode 100644
index 0000000..4c713f2
Binary files /dev/null and b/reactShell/public/assets/ship/ship2.png differ
diff --git a/reactShell/src/App.tsx b/reactShell/src/App.tsx
index fa7b3fa..7e15bc5 100644
--- a/reactShell/src/App.tsx
+++ b/reactShell/src/App.tsx
@@ -5,41 +5,23 @@ import UpgradeMenu from './ui/UpgradeMenu'
 import StatusOverlay from './ui/StatusOverlay'
 import PauseOverlay from './ui/PauseOverlay'
 import StartScreen from './ui/StartScreen'
-import DevTuningOverlay from './ui/DevTuningOverlay'
 
 function App() {
   const [showStart, setShowStart] = useState(true)
-  const [shipPx, setShipPx] = useState<number>(65)
-  const [showDev, setShowDev] = useState(false)
 
   useEffect(() => {
     // Initialize game
     console.log('Asteroids React Shell initializing...')
-    
-    // Backtick key listener for dev overlay toggle
-    const handleKeyDown = (event: KeyboardEvent) => {
-      if (event.key === '`') {
-        setShowDev(prev => !prev)
-      }
-    }
-    
-    window.addEventListener('keydown', handleKeyDown)
-    return () => window.removeEventListener('keydown', handleKeyDown)
   }, [])
 
   return (
     <div className="app">
-      <GameCanvas shipPixelSize={shipPx} />
+      <GameCanvas />
       <Hud />
       <UpgradeMenu />
       <StatusOverlay />
       <PauseOverlay />
       <StartScreen visible={showStart} onDismiss={() => setShowStart(false)} />
-      <DevTuningOverlay 
-        visible={showDev} 
-        value={shipPx} 
-        onChange={setShipPx} 
-      />
     </div>
   )
 }
diff --git a/reactShell/src/game/GameCanvas.tsx b/reactShell/src/game/GameCanvas.tsx
index 1d2b032..20c92e7 100644
--- a/reactShell/src/game/GameCanvas.tsx
+++ b/reactShell/src/game/GameCanvas.tsx
@@ -20,13 +20,8 @@ function makeOrthoCamera(w: number, h: number): THREE.OrthographicCamera {
   return cam
 }
 
-interface GameCanvasProps {
-  shipPixelSize?: number
-}
-
-export default function GameCanvas({ shipPixelSize }: GameCanvasProps) {
+export default function GameCanvas() {
   const canvasRef = useRef<HTMLCanvasElement>(null)
-  const shipRef = useRef<Ship | null>(null)
 
   useEffect(() => {
     if (!canvasRef.current) return
@@ -42,13 +37,6 @@ export default function GameCanvas({ shipPixelSize }: GameCanvasProps) {
     // Initialize game systems
     const input = new Input()
     const ship = new Ship(scene)
-    shipRef.current = ship
-    
-    // Apply initial ship pixel size if provided
-    if (shipPixelSize) {
-      // Wait for texture to load before applying scale
-      setTimeout(() => ship.setPixelHeight(shipPixelSize), 100)
-    }
     
     // Initialize PostFX with default direct rendering (vanilla parity)
     createComposer(renderer, scene, camera, {
@@ -120,12 +108,5 @@ export default function GameCanvas({ shipPixelSize }: GameCanvasProps) {
     }
   }, [])
 
-  // Apply ship pixel size changes
-  useEffect(() => {
-    if (shipRef.current && shipPixelSize) {
-      shipRef.current.setPixelHeight(shipPixelSize)
-    }
-  }, [shipPixelSize])
-
   return <canvas ref={canvasRef} id="game-canvas" />
 }
\ No newline at end of file
diff --git a/reactShell/src/game/entities/Ship.ts b/reactShell/src/game/entities/Ship.ts
index c12c35c..d861b11 100644
--- a/reactShell/src/game/entities/Ship.ts
+++ b/reactShell/src/game/entities/Ship.ts
@@ -17,7 +17,7 @@ const WORLD = {
 }
 
 // Ship visual scale
-const SHIP_DESIRED_PX = 65 // tweak 90–110 for parity with vanilla screenshot
+const SHIP_DESIRED_PX = 50 // tweak 90–110 for parity with vanilla screenshot
 const ROTATION_OFFSET = -Math.PI / 2 // Ship sprite nose points "up" (+Y)
 
 export class Ship {
diff --git a/reactShell/src/index.css b/reactShell/src/index.css
index 2a2b270..c0263f0 100644
--- a/reactShell/src/index.css
+++ b/reactShell/src/index.css
@@ -18,25 +18,4 @@ body {
 #root {
   width: 100vw;
   height: 100vh;
-}
-
-.dev-overlay {
-  position: fixed; 
-  top: 8px; 
-  left: 8px; 
-  z-index: 9999;
-  background: rgba(0,0,0,0.7); 
-  color: #fff; 
-  padding: 8px 10px; 
-  border-radius: 6px;
-  font: 12px/1.3 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
-}
-
-.dev-overlay input[type="range"] { 
-  width: 180px; 
-}
-
-.dev-overlay input[type="number"] { 
-  width: 64px; 
-  margin-left: 8px; 
 }
\ No newline at end of file
diff --git a/reactShell/src/ui/DevTuningOverlay.tsx b/reactShell/src/ui/DevTuningOverlay.tsx
deleted file mode 100644
index 4c24aa4..0000000
--- a/reactShell/src/ui/DevTuningOverlay.tsx
+++ /dev/null
@@ -1,57 +0,0 @@
-import React from 'react'
-
-interface DevTuningOverlayProps {
-  visible: boolean
-  value: number
-  min?: number
-  max?: number
-  step?: number
-  onChange: (v: number) => void
-}
-
-export default function DevTuningOverlay({
-  visible,
-  value,
-  min = 40,
-  max = 140,
-  step = 1,
-  onChange
-}: DevTuningOverlayProps) {
-  if (!visible) return null
-
-  const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    onChange(Number(e.target.value))
-  }
-
-  const handleNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const newValue = Number(e.target.value)
-    if (!isNaN(newValue) && newValue >= min && newValue <= max) {
-      onChange(newValue)
-    }
-  }
-
-  return (
-    <div className="dev-overlay">
-      <label>
-        Ship size: {value} px
-        <br />
-        <input
-          type="range"
-          min={min}
-          max={max}
-          step={step}
-          value={value}
-          onChange={handleSliderChange}
-        />
-        <input
-          type="number"
-          min={min}
-          max={max}
-          step={step}
-          value={value}
-          onChange={handleNumberChange}
-        />
-      </label>
-    </div>
-  )
-}
\ No newline at end of file
