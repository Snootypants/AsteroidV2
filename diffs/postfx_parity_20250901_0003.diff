diff --git a/reactShell/src/game/GameCanvas.tsx b/reactShell/src/game/GameCanvas.tsx
index 687c280..c3f6100 100644
--- a/reactShell/src/game/GameCanvas.tsx
+++ b/reactShell/src/game/GameCanvas.tsx
@@ -1,4 +1,48 @@
-// GameCanvas.tsx - Three.js mount point
+// GameCanvas.tsx - Three.js mount point with minimal PostFX integration
+import { useEffect, useRef } from 'react'
+import * as THREE from 'three'
+import { createComposer, resize, render } from './render/PostFX'
+
 export default function GameCanvas() {
-  return <canvas id="game-canvas" />
+  const canvasRef = useRef<HTMLCanvasElement>(null)
+
+  useEffect(() => {
+    if (!canvasRef.current) return
+
+    // Basic Three.js setup - placeholder for full game integration
+    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current })
+    const scene = new THREE.Scene()
+    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
+    
+    // Initialize PostFX with default direct rendering (vanilla parity)
+    createComposer(renderer, scene, camera, {
+      width: window.innerWidth,
+      height: window.innerHeight
+    })
+
+    // Handle resize
+    const handleResize = () => {
+      const width = window.innerWidth
+      const height = window.innerHeight
+      camera.aspect = width / height
+      camera.updateProjectionMatrix()
+      resize(width, height)
+    }
+
+    window.addEventListener('resize', handleResize)
+    handleResize()
+
+    // Basic render loop - will be replaced by full game loop
+    const animate = (delta: number) => {
+      render(delta) // Uses direct rendering by default (vanilla parity)
+      requestAnimationFrame(animate)
+    }
+    requestAnimationFrame(animate)
+
+    return () => {
+      window.removeEventListener('resize', handleResize)
+    }
+  }, [])
+
+  return <canvas ref={canvasRef} id="game-canvas" />
 }
\ No newline at end of file
diff --git a/reactShell/src/game/render/PostFX.ts b/reactShell/src/game/render/PostFX.ts
index 3d65e90..795b64c 100644
--- a/reactShell/src/game/render/PostFX.ts
+++ b/reactShell/src/game/render/PostFX.ts
@@ -3,32 +3,61 @@ import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer
 import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'
 import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'
 import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js'
+import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'
+
+let composer: EffectComposer
+let outlinePass: OutlinePass
+let renderer: THREE.WebGLRenderer
+let scene: THREE.Scene
+let camera: THREE.Camera
+let useComposerFlag = false
+
+// VignetteShader copied verbatim from vanilla
+const VignetteShader = {
+  uniforms: {
+    tDiffuse: { value: null },
+    offset: { value: 1.15 },
+    darkness: { value: 0.55 },
+  },
+  vertexShader: `varying vec2 vUv; void main(){ vUv=uv; gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0); }`,
+  fragmentShader: `uniform sampler2D tDiffuse; uniform float offset; uniform float darkness; varying vec2 vUv; void main(){ vec4 texel = texture2D(tDiffuse, vUv); vec2 uv = vUv - 0.5; float vignette = smoothstep(0.8, offset, length(uv)); gl_FragColor = vec4(texel.rgb*(1.0 - vignette*darkness), texel.a); }`
+}
 
 export function createComposer(
-  renderer: THREE.WebGLRenderer,
-  scene: THREE.Scene,
-  camera: THREE.Camera,
+  rendererParam: THREE.WebGLRenderer,
+  sceneParam: THREE.Scene,
+  cameraParam: THREE.Camera,
   size: { width: number; height: number }
 ) {
-  // Set renderer properties to match vanilla
+  renderer = rendererParam
+  scene = sceneParam
+  camera = cameraParam
+
+  // Set renderer properties to match vanilla exactly
   renderer.setPixelRatio(window.devicePixelRatio)
   renderer.outputColorSpace = THREE.SRGBColorSpace
   renderer.toneMapping = THREE.ACESFilmicToneMapping
   renderer.toneMappingExposure = 1.2
 
   // Create composer
-  const composer = new EffectComposer(renderer)
+  composer = new EffectComposer(renderer)
   composer.setSize(size.width, size.height)
   
   // Add render pass
   composer.addPass(new RenderPass(scene, camera))
   
   // Add outline pass
-  const outlinePass = new OutlinePass(
+  outlinePass = new OutlinePass(
     new THREE.Vector2(size.width, size.height),
     scene,
     camera
   )
+  outlinePass.edgeStrength = 3.0
+  outlinePass.edgeGlow = 0.4
+  outlinePass.edgeThickness = 1.0
+  outlinePass.pulsePeriod = 0.0
+  outlinePass.visibleEdgeColor.set(0xd7f0ff)
+  outlinePass.hiddenEdgeColor.set(0x111319)
   composer.addPass(outlinePass)
   
   // Add bloom pass with exact vanilla parameters
@@ -43,14 +72,30 @@ export function createComposer(
   bloom.radius = 0.6
   composer.addPass(bloom)
 
+  // Add vignette pass
+  const vignettePass = new ShaderPass(VignetteShader)
+  composer.addPass(vignettePass)
+
   return {
     composer,
-    resize: (width: number, height: number) => {
-      composer.setSize(width, height)
-      outlinePass.setSize(width, height)
-    },
-    render: (delta: number) => {
-      composer.render(delta)
-    }
+    resize,
+    render,
+    setUseComposer
   }
-}
\ No newline at end of file
+}
+
+export function resize(width: number, height: number) {
+  renderer.setSize(width, height)
+  composer.setSize(width, height)
+  outlinePass.setSize(width, height)
+}
+
+export function render(delta: number) {
+  return useComposerFlag ? composer.render(delta) : renderer.render(scene, camera)
+}
+
+export function setUseComposer(flag: boolean) {
+  useComposerFlag = !!flag
+}
+
+export { composer }
\ No newline at end of file
